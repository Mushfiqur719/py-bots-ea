import re
from playwright.sync_api import Playwright, sync_playwright, expect

def run(playwright: Playwright) -> None:
    browser = playwright.chromium.launch(headless=False)
    context = browser.new_context(storage_state="auth.json")
    page = context.new_page()
    page.goto("https://expert-advisor-studio.com/")
    page.get_by_label("Theme").select_option("dark")
    page.wait_for_timeout(3000)

    page.get_by_role("link", name="Tools").click()
    page.get_by_label("Collection capacity").select_option("300")
    page.get_by_role("link", name="Acceptance Criteria").click()
    page.locator("#validation-metrics-base div").filter(has_text=re.compile(r"^Minimum net profit$")).get_by_role("spinbutton").click()
    page.locator("#validation-metrics-base div").filter(has_text=re.compile(r"^Minimum net profit$")).get_by_role("spinbutton").press("Control+a")
    page.locator("#validation-metrics-base div").filter(has_text=re.compile(r"^Minimum net profit$")).get_by_role("spinbutton").fill("250")
    page.locator("div").filter(has_text=re.compile(r"^Minimum count of trades$")).get_by_role("spinbutton").click()
    page.locator("div").filter(has_text=re.compile(r"^Minimum count of trades$")).get_by_role("spinbutton").press("Control+a")
    page.locator("div").filter(has_text=re.compile(r"^Minimum count of trades$")).get_by_role("spinbutton").fill("50")
    page.locator("#validation-metrics-base").get_by_role("button", name="+ Add acceptance criteria").click()
    page.get_by_role("link", name="Minimum Sharpe ratio").click()
    page.locator("div").filter(has_text=re.compile(r"^Minimum Sharpe ratio$")).get_by_role("spinbutton").click()
    page.locator("div").filter(has_text=re.compile(r"^Minimum Sharpe ratio$")).get_by_role("spinbutton").press("Control+a")
    page.locator("div").filter(has_text=re.compile(r"^Minimum Sharpe ratio$")).get_by_role("spinbutton").fill("0.1")
    page.get_by_role("link", name="Available Indicators").click()
    page.locator("#toggle-entries").click()
    page.locator("#toggle-entries").click()
    page.locator("#toggle-exits").click()
    page.locator("#toggle-exits").click()
    page.get_by_role("row", name="Do not Exit").get_by_role("checkbox").uncheck()
    page.get_by_role("row", name="Exit Time").get_by_role("checkbox").uncheck()
    page.get_by_role("link", name="Data").click()
    page.get_by_role("link", name="Data Horizon").click()
    page.get_by_label("Maximum data bars").click()
    page.get_by_label("Maximum data bars").press("Control+a")
    page.get_by_label("Maximum data bars").fill("200000")
    page.get_by_label("Start date", exact=True).press("Control+a")
    page.get_by_label("Start date", exact=True).fill("2018-08-27")
    page.get_by_label("Use start date limit").check()
    page.get_by_role("link", name="Strategy ID -").click()
    page.get_by_role("link", name="Monte Carlo").click()
    page.get_by_label("Randomize history data").uncheck()
    page.get_by_label("Randomize spread").uncheck()
    page.get_by_label("Randomize slippage").uncheck()
    page.get_by_label("Randomly skip position entry").uncheck()
    page.get_by_label("Randomly skip position exit").uncheck()
    page.get_by_label("Randomize indicator parameters").check()
    page.get_by_label("Randomize backtest starting bar").check()
    page.get_by_role("link", name="Validation").click()
    page.locator("div").filter(has_text=re.compile(r"^Minimum net profit$")).get_by_role("spinbutton").click()
    page.locator("div").filter(has_text=re.compile(r"^Minimum net profit$")).get_by_role("spinbutton").press("Control+a")
    page.locator("div").filter(has_text=re.compile(r"^Minimum net profit$")).get_by_role("spinbutton").fill("50")
    page.locator("div").filter(has_text=re.compile(r"^Minimum count of trades$")).get_by_role("spinbutton").click()
    page.locator("div").filter(has_text=re.compile(r"^Minimum count of trades$")).get_by_role("spinbutton").press("Control+a")
    page.locator("div").filter(has_text=re.compile(r"^Minimum count of trades$")).get_by_role("spinbutton").fill("50")
    page.get_by_role("button", name="+ Add validation criteria").click()
    page.get_by_role("link", name="Minimum profit factor").click()
    page.locator("div").filter(has_text=re.compile(r"^Minimum profit factor$")).get_by_role("spinbutton").click()
    page.locator("div").filter(has_text=re.compile(r"^Minimum profit factor$")).get_by_role("spinbutton").press("Control+a")
    page.locator("div").filter(has_text=re.compile(r"^Minimum profit factor$")).get_by_role("spinbutton").fill("1.01")
    page.get_by_role("link", name="Open the Generator, the Reactor, or the Validator").click()
    page.get_by_role("link", name="Reactor", exact=True).click()
    page.get_by_label("Data source").select_option("FXView-Demo")
    page.get_by_label("Symbol").select_option("USDCAD")
    page.get_by_label("Period").select_option("M1")
    page.locator("div").filter(has_text=re.compile(r"^2\. Strategy properties$")).click()
    page.get_by_label("Entry lots").click()
    page.get_by_label("Entry lots").press("Control+a")
    page.get_by_label("Entry lots").fill("0.01")
    page.get_by_label("Opposite entry signal").select_option("2")
    page.get_by_label("Stop Loss", exact=True).select_option("0")
    page.get_by_label("Type").select_option("3")
    page.get_by_role("spinbutton", name="Min (pips)").click()
    page.get_by_role("spinbutton", name="Min (pips)").press("Control+a")
    page.get_by_role("spinbutton", name="Min (pips)").fill("1")
    page.get_by_role("spinbutton", name="Max (pips)").click()
    page.get_by_role("spinbutton", name="Max (pips)").press("Control+a")
    page.get_by_role("spinbutton", name="Max (pips)").fill("1000")
    page.locator("div").filter(has_text=re.compile(r"^3\. Generator settings$")).click()
    page.locator("#search-best").select_option("4")
    page.get_by_label("Max entry indicators").select_option("8")
    page.get_by_label("Max exit indicators").select_option("4")
    page.get_by_label("Generate strategies with\nPreset Indicators").uncheck()
    page.get_by_label("Working minutes").click()
    page.get_by_label("Working minutes").press("Control+a")
    page.get_by_label("Working minutes").fill("720")
    page.get_by_role("link", name="Open the Generator, the Reactor, or the Validator").click()
    page.get_by_label("", exact=True).get_by_role("link", name="Reactor").click()
    page.locator("div").filter(has_text=re.compile(r"^1\. Historical data$")).click()
    

    page.get_by_role('button',name='Confirm').click()
    
    page.wait_for_timeout(10000)
    # page.wait_for_selector('#acquisition-link')
    # page.click('#acquisition-link')

    page.wait_for_selector('#button-start-stop')
    page.click('#button-start-stop')

    # page.get_by_role("button", name="Start").click()
    # page.get_by_role("button", name="Stop").click()

    # ---------------------
    context.close()
    browser.close()


with sync_playwright() as playwright:
    run(playwright)
